
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Advertising_areasScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  type: 'type',
  dimensions: 'dimensions',
  coordinates: 'coordinates',
  city: 'city',
  state: 'state',
  country: 'country',
  baseRate: 'baseRate',
  pricing: 'pricing',
  rateType: 'rateType',
  currency: 'currency',
  status: 'status',
  isActive: 'isActive',
  maxBookings: 'maxBookings',
  images: 'images',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyId: 'propertyId',
  features: 'features'
};

exports.Prisma.BookingsScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  totalAmount: 'totalAmount',
  currency: 'currency',
  status: 'status',
  isPaid: 'isPaid',
  notes: 'notes',
  metadata: 'metadata',
  bookingType: 'bookingType',
  booker_id: 'booker_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bookerId: 'bookerId',
  propertyId: 'propertyId',
  campaignId: 'campaignId',
  advertisingAreaId: 'advertisingAreaId'
};

exports.Prisma.CampaignsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  budget: 'budget',
  dailyBudget: 'dailyBudget',
  currency: 'currency',
  targetAudience: 'targetAudience',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  impressions: 'impressions',
  clicks: 'clicks',
  conversions: 'conversions',
  totalSpent: 'totalSpent',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  advertiserId: 'advertiserId',
  propertyId: 'propertyId',
  advertiser_id: 'advertiser_id',
  brand_name: 'brand_name',
  content_description: 'content_description',
  content_type: 'content_type',
  end_date: 'end_date',
  media_dimensions: 'media_dimensions',
  media_files: 'media_files',
  media_type: 'media_type',
  notes: 'notes',
  start_date: 'start_date',
  total_budget: 'total_budget',
  keywords: 'keywords',
  primary_objective: 'primary_objective',
  target_demographics: 'target_demographics',
  geographic_targeting: 'geographic_targeting',
  creative_concept: 'creative_concept',
  call_to_action: 'call_to_action',
  brand_guidelines: 'brand_guidelines',
  placement_preferences: 'placement_preferences',
  success_metrics: 'success_metrics',
  technical_specs: 'technical_specs'
};

exports.Prisma.Chat_messagesScalarFieldEnum = {
  id: 'id',
  content: 'content',
  chatRoom: 'chatRoom',
  createdAt: 'createdAt',
  senderId: 'senderId'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status',
  isPaid: 'isPaid',
  paidAt: 'paidAt',
  paymentMethod: 'paymentMethod',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  bookingId: 'bookingId',
  campaignId: 'campaignId'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  content: 'content',
  isRead: 'isRead',
  type: 'type',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId',
  recipientId: 'recipientId',
  conversationId: 'conversationId',
  replyToId: 'replyToId',
  editedAt: 'editedAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  messageData: 'messageData'
};

exports.Prisma.ConversationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  isArchived: 'isArchived',
  lastMessageId: 'lastMessageId',
  propertyId: 'propertyId',
  bookingId: 'bookingId',
  campaignId: 'campaignId',
  createdBy: 'createdBy'
};

exports.Prisma.Conversation_participantsScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive',
  isMuted: 'isMuted',
  lastReadAt: 'lastReadAt'
};

exports.Prisma.Message_attachmentsScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  fileUrl: 'fileUrl',
  thumbnailUrl: 'thumbnailUrl',
  uploadStatus: 'uploadStatus',
  createdAt: 'createdAt'
};

exports.Prisma.Message_reactionsScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  reaction: 'reaction',
  createdAt: 'createdAt'
};

exports.Prisma.Message_read_receiptsScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.Payment_remindersScalarFieldEnum = {
  id: 'id',
  message: 'message',
  sentAt: 'sentAt',
  method: 'method',
  userId: 'userId',
  invoiceId: 'invoiceId',
  bookingId: 'bookingId'
};

exports.Prisma.Payment_settingsScalarFieldEnum = {
  id: 'id',
  stripeCustomerId: 'stripeCustomerId',
  stripeAccountId: 'stripeAccountId',
  defaultPaymentMethod: 'defaultPaymentMethod',
  bankAccountNumber: 'bankAccountNumber',
  routingNumber: 'routingNumber',
  accountHolderName: 'accountHolderName',
  autoPayEnabled: 'autoPayEnabled',
  reminderEnabled: 'reminderEnabled',
  reminderDaysBefore: 'reminderDaysBefore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PropertiesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  zipCode: 'zipCode',
  latitude: 'latitude',
  longitude: 'longitude',
  location: 'location',
  propertyType: 'propertyType',
  size: 'size',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  type: 'type',
  spaceType: 'spaceType',
  dimensions: 'dimensions',
  specifications: 'specifications',
  primary_image: 'primary_image',
  basePrice: 'basePrice',
  pricing: 'pricing',
  currency: 'currency',
  status: 'status',
  isActive: 'isActive',
  isApproved: 'isApproved',
  owner_id: 'owner_id',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  features: 'features',
  images: 'images',
  photos: 'photos',
  videos: 'videos',
  documents: 'documents'
};

exports.Prisma.Property_approvalsScalarFieldEnum = {
  id: 'id',
  status: 'status',
  notes: 'notes',
  reviewedAt: 'reviewedAt',
  approvalType: 'approvalType',
  metadata: 'metadata',
  propertyId: 'propertyId',
  reviewerId: 'reviewerId',
  property_id: 'property_id',
  reviewer_id: 'reviewer_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  full_name: 'full_name',
  imageUrl: 'imageUrl',
  phone: 'phone',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RateType = exports.$Enums.RateType = {
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  PLANNING: 'PLANNING'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.MessageType = exports.$Enums.MessageType = {
  GENERAL: 'GENERAL',
  BOOKING_UPDATE: 'BOOKING_UPDATE',
  PAYMENT_REMINDER: 'PAYMENT_REMINDER',
  SYSTEM_NOTIFICATION: 'SYSTEM_NOTIFICATION',
  SUPPORT_TICKET: 'SUPPORT_TICKET',
  SPACE_INQUIRY: 'SPACE_INQUIRY',
  CAMPAIGN_UPDATE: 'CAMPAIGN_UPDATE'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ConversationType = exports.$Enums.ConversationType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  PROPERTY_OWNER: 'PROPERTY_OWNER',
  ADVERTISER: 'ADVERTISER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.ReminderMethod = exports.$Enums.ReminderMethod = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH_NOTIFICATION: 'PUSH_NOTIFICATION',
  IN_APP: 'IN_APP'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  HOUSE: 'HOUSE',
  APARTMENT: 'APARTMENT',
  CONDO: 'CONDO',
  COMMERCIAL: 'COMMERCIAL',
  LAND: 'LAND',
  WAREHOUSE: 'WAREHOUSE',
  OFFICE: 'OFFICE',
  RETAIL: 'RETAIL',
  OTHER: 'OTHER',
  BUILDING: 'BUILDING',
  VEHICLE_FLEET: 'VEHICLE_FLEET',
  EVENT_VENUE: 'EVENT_VENUE',
  TRANSIT_STATION: 'TRANSIT_STATION',
  BILLBOARD: 'BILLBOARD',
  DIGITAL_DISPLAY: 'DIGITAL_DISPLAY'
};

exports.SpaceType = exports.$Enums.SpaceType = {
  building: 'building',
  event_venue: 'event_venue',
  transit_station: 'transit_station',
  retail: 'retail',
  billboard: 'billboard',
  digital_display: 'digital_display',
  super_side_ads: 'super_side_ads',
  tail_light_ads: 'tail_light_ads',
  wrap_around_ads: 'wrap_around_ads',
  digital_display_side: 'digital_display_side',
  digital_wraps: 'digital_wraps',
  other: 'other'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REQUIRES_CHANGES: 'REQUIRES_CHANGES'
};

exports.Prisma.ModelName = {
  advertising_areas: 'advertising_areas',
  bookings: 'bookings',
  campaigns: 'campaigns',
  chat_messages: 'chat_messages',
  invoices: 'invoices',
  messages: 'messages',
  conversations: 'conversations',
  conversation_participants: 'conversation_participants',
  message_attachments: 'message_attachments',
  message_reactions: 'message_reactions',
  message_read_receipts: 'message_read_receipts',
  payment_reminders: 'payment_reminders',
  payment_settings: 'payment_settings',
  properties: 'properties',
  property_approvals: 'property_approvals',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
